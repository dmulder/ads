#!/usr/bin/python
import sys, argparse, PAM
from getpass import getpass, getuser
from subprocess import Popen, PIPE

conf = '/etc/krb5.conf'

# this is clunky, but works for now (ConfigParser can't parse a krb5.conf)
def get_default_realm():
    ans = ''
    for line in open(conf):
        line = line.split('#')[0]
        if 'default_realm' in line:
            ans = line.split()[-1]
    # the last defined default_realm is the one we choose
    return ans
    
default_realm = get_default_realm()

def print_help():
    print 'invalid syntax or option not implemented'

def user_list(admin, password):
    return Popen(['net', 'rpc', 'user', '-U%s%%%s' % (admin, password), '-S', default_realm], stdout=PIPE).communicate()[0].strip().split('\n')

def group_list(admin, password):
    return Popen(['net', 'rpc', 'group', '-U%s%%%s' % (admin, password), '-S', default_realm], stdout=PIPE).communicate()[0].strip().split('\n')

def getpwnam(user, admin, password):
    return Popen(['getent', 'passwd', user], stdout=PIPE).communicate()[0].strip()

def getgrnam(group, admin, password):
    return Popen(['getent', 'group', group], stdout=PIPE).communicate()[0].strip()

def getpwent(admin, password):
    ulist = Popen(['getent', 'passwd'], stdout=PIPE).communicate()[0].strip().split('\n')
    ulist.extend([getpwnam('%s@%s' % (user, default_realm), admin, password) for user in user_list(admin, password)])
    return ulist

def getgrent(admin, password):
    glist = Popen(['getent', 'group'], stdout=PIPE).communicate()[0].strip().split('\n')
    glist.extend([getgrnam('%s@%s' % (group, default_realm), admin, password) for group in group_list(admin, password)])
    return glist

def get_creds(admin, password):
    if not admin:
        admin = raw_input("Username: ")
    if not password:
        password = getpass("Password: ")
    return (admin, password)

def pam_conv(auth, query_list):
    resp = []
    for (query, type) in query_list:
        # Never echo
        if type == PAM.PAM_PROMPT_ECHO_ON or PAM.PAM_PROMPT_ECHO_OFF:
            resp.append((getpass(query), 0))
        else:
            print query
            resp.append(('', 0))
    return resp

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="AD tool: for simplifying access to AD on unix systems", formatter_class=argparse.RawDescriptionHelpFormatter, add_help=False)
    parser.add_argument("-u")
    parser.add_argument("-w")
    parser.add_argument('-h', '--help', action='store_true')
    parser.add_argument("s1", choices=['nss', 'user', 'group', 'create', 'delete', 'list', 'passwd'], action='store')
    parser.add_argument("s2", nargs='?') # choices=['getpwnam', 'getpwuid', 'add', 'getgrnam', 'getgrid', 'getpwent', 'getgrent', 'user', 'group', 'users', 'groups', 'checklogin', 'checkaccess']
    parser.add_argument("s3", nargs='?')

    args = parser.parse_args()

    if args.help:
        print_help()
        exit(0)

    admin = None
    if args.u:
        admin = args.u
    password = None
    if args.w:
        password = args.w

    if args.s1 == 'nss' or args.s1 == 'list':
        admin, password = get_creds(admin, password)
        if args.s2 == 'getpwnam' or args.s2 == 'getpwuid':
            pw = getpwnam(args.s3, admin, password)
            if not pw:
                pw = getpwnam('%s@%s' % (args.s3, default_realm), admin, password)
            if pw:
                print pw
        elif args.s2 == 'getgrnam' or args.s2 == 'getgrid':
            gr = getgrnam(args.s3, admin, password)
            if not gr:
                gr = getgrnam('%s@%s' % (args.s3, default_realm), admin, password)
            if gr:
                print gr
        elif args.s2 == 'getpwent' or args.s2 == 'users':
            ulist = getpwent(admin, password)
            for pw in ulist:
                if pw.strip():
                    print pw
        elif args.s2 == 'getgrent' or args.s2 == 'groups':
            glist = getgrent(admin, password)
            for gr in glist:
                if gr.strip():
                    print gr
        else:
            print_help()
    elif args.s1 == 'create':
        admin, password = get_creds(admin, password)
        if args.s2 == 'user':
            new_user_pass = getpass("New password: ")
            Popen(['net', 'rpc', 'user', 'add', args.s3, new_user_pass, '-U%s%%%s' % (admin, password), '-S', default_realm]).wait()
        elif args.s2 == 'group':
            Popen(['net', 'rpc', 'group', 'add', args.s3, '-U%s%%%s' % (admin, password), '-S', default_realm]).wait()
        else:
            print_help()
    elif args.s1 == 'delete':
        admin, password = get_creds(admin, password)
        if args.s2 == 'user':
            Popen(['net', 'rpc', 'user', 'delete', args.s3, '-U%s%%%s' % (admin, password), '-S', default_realm]).wait()
        elif args.s2 == 'group':
            Popen(['net', 'rpc', 'group', 'delete', args.s3, '-U%s%%%s' % (admin, password), '-S', default_realm]).wait()
        else:
            print_help()
    elif args.s1 == 'user':
        if args.s2 == 'checklogin' and args.s3:
            p = PAM.pam()
            p.start('passwd')
            p.set_item(PAM.PAM_USER, args.s3)
            p.set_item(PAM.PAM_CONV, pam_conv)
            try:
                p.authenticate()
            except:
                print 'Authentication failed'
            else:
                print 'Authentication succeeded'
            try:
                p.acct_mgmt()
            except:
                print 'User is not allowed'
            else:
                print 'User is allowed'
        elif args.s2 == 'checkaccess' and args.s3:
            p = PAM.pam()
            p.start('passwd')
            p.set_item(PAM.PAM_USER, args.s3)
            try:
                p.acct_mgmt()
            except:
                print 'User is not allowed'
            else:
                print 'User is allowed'
    elif args.s1 == 'passwd':
        admin, password = get_creds(admin, password)
        if args.s2:
            user = args.s2
        else:
            user = getuser()
        Popen(['net', 'rpc', 'password', user, '-U%s%%%s' % (admin, password), '-S', default_realm]).wait()
    else:
        print_help()
