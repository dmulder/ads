#!/usr/bin/python
import sys, argparse, PAM, struct
from getpass import getpass, getuser
from subprocess import Popen, PIPE
from base64 import b64decode

conf = '/etc/krb5.conf'
winbindd = '/usr/sbin/winbindd'
smbd = '/usr/sbin/smbd'
admin = None
password = None
debug_level = '0'

# this is clunky, but works for now (ConfigParser can't parse a krb5.conf)
def get_default_realm():
    ans = ''
    for line in open(conf):
        line = line.split('#')[0]
        if 'default_realm' in line:
            ans = line.split()[-1]
    # the last defined default_realm is the one we choose
    if not ans:
        ans = raw_input('Default realm not found, specify a server: ')
    return ans

def get_smb_conf():
    return Popen(['grep', 'CONFIGFILE'], stdin=Popen([smbd, '-b'], stdout=PIPE).stdout, stdout=PIPE).communicate()[0].strip().split(':')[-1].strip()
    
default_realm = get_default_realm()

def print_help():
    print 'invalid syntax or option not implemented'

def user_list(admin, password, debug_level):
    cmd = ['net', 'rpc', 'user', '-U%s%%%s' % (admin, password), '-S', default_realm]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd, stdout=PIPE).communicate()[0].strip().split('\n')

def group_list(admin, password, debug_level):
    cmd = ['net', 'rpc', 'group', '-U%s%%%s' % (admin, password), '-S', default_realm]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd, stdout=PIPE).communicate()[0].strip().split('\n')

def getpwnam(user, admin, password, debug_level):
    cmd = ['getent', 'passwd', user]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd, stdout=PIPE).communicate()[0].strip()

def getgrnam(group, admin, password, debug_level):
    cmd = ['getent', 'group', group]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd, stdout=PIPE).communicate()[0].strip()

def getpwent(admin, password, debug_level):
    cmd = ['getent', 'passwd']
    if debug_level != '0':
        print ' '.join(cmd)
    ulist = Popen(cmd, stdout=PIPE).communicate()[0].strip().split('\n')
    ulist.extend([getpwnam('%s@%s' % (user, default_realm), admin, password, debug_level) for user in user_list(admin, password, debug_level)])
    return ulist

def getgrent(admin, password, debug_level):
    cmd = ['getent', 'group']
    if debug_level != '0':
        print ' '.join(cmd)
    glist = Popen(cmd, stdout=PIPE).communicate()[0].strip().split('\n')
    glist.extend([getgrnam('%s@%s' % (group, default_realm), admin, password, debug_level) for group in group_list(admin, password, debug_level)])
    return glist

def get_creds(admin, password):
    if not admin:
        admin = raw_input("Username: ")
    if not password:
        password = getpass("Password: ")
    return (admin, password)

def pam_conv(auth, query_list):
    resp = []
    for (query, type) in query_list:
        # Never echo
        if type == PAM.PAM_PROMPT_ECHO_ON or PAM.PAM_PROMPT_ECHO_OFF:
            resp.append((getpass(query), 0))
        else:
            print query
            resp.append(('', 0))
    return resp

def nss(args):
    global admin, password, debug_level
    admin, password = get_creds(admin, password)
    if args.s2 == 'getpwnam' or args.s2 == 'getpwuid':
        pw = getpwnam(args.object, admin, password, debug_level)
        if not pw:
            pw = getpwnam('%s@%s' % (args.object, default_realm), admin, password, debug_level)
        if pw:
            print pw
    elif args.s2 == 'getgrnam' or args.s2 == 'getgrid':
        gr = getgrnam(args.object, admin, password, debug_level)
        if not gr:
            gr = getgrnam('%s@%s' % (args.object, default_realm), admin, password, debug_level)
        if gr:
            print gr
    elif args.s2 == 'getpwent' or args.s2 == 'users':
        ulist = getpwent(admin, password, debug_level)
        for pw in ulist:
            if pw.strip():
                print pw
    elif args.s2 == 'getgrent' or args.s2 == 'groups':
        glist = getgrent(admin, password, debug_level)
        for gr in glist:
            if gr.strip():
                print gr
    else:
        print_help()

def create(args):
    global admin, password, debug_level
    admin, password = get_creds(admin, password)
    if args.s2 == 'user':
        new_user_pass = getpass("New password: ")
        cmd = ['net', 'rpc', 'user', 'add', args.object, new_user_pass, '-U%s%%%s' % (admin, password), '-S', default_realm, '-d', debug_level]
        if debug_level != '0':
            print ' '.join(cmd)
        return Popen(cmd).wait()
    elif args.s2 == 'group':
        cmd = ['net', 'rpc', 'group', 'add', args.object, '-U%s%%%s' % (admin, password), '-S', default_realm, '-d', debug_level]
        if debug_level != '0':
            print ' '.join(cmd)
        return Popen(cmd).wait()
    else:
        print_help()

def delete(args):
    global admin, password, debug_level
    admin, password = get_creds(admin, password)
    if args.s2 == 'user':
        cmd = ['net', 'rpc', 'user', 'delete', args.object, '-U%s%%%s' % (admin, password), '-S', default_realm, '-d', debug_level]
        if debug_level != '0':
            print ' '.join(cmd)
        return Popen(cmd).wait()
    elif args.s2 == 'group':
        cmd = ['net', 'rpc', 'group', 'delete', args.object, '-U%s%%%s' % (admin, password), '-S', default_realm, '-d', debug_level]
        if debug_level != '0':
            print ' '.join(cmd)
        return Popen(cmd).wait()
    else:
        print_help()

def user(args):
    global admin, password, debug_level
    if args.s2 == 'checklogin' and args.user:
        p = PAM.pam()
        p.start('passwd')
        p.set_item(PAM.PAM_USER, args.user)
        p.set_item(PAM.PAM_CONV, pam_conv)
        try:
            p.authenticate()
        except:
            print 'Authentication failed'
        else:
            print 'Authentication succeeded'
        try:
            p.acct_mgmt()
        except:
            print 'User is not allowed'
        else:
            print 'User is allowed'
    elif args.s2 == 'checkaccess' and args.user:
        p = PAM.pam()
        p.start('passwd')
        p.set_item(PAM.PAM_USER, args.user)
        try:
            p.acct_mgmt()
        except:
            print 'User is not allowed'
        else:
            print 'User is allowed'

def passwd(args):
    global admin, password, debug_level
    admin, password = get_creds(admin, password)
    if args.object:
        user = args.object
    else:
        user = getuser()
    cmd = ['net', 'rpc', 'password', user, '-U%s%%%s' % (admin, password), '-S', default_realm, '-d', debug_level]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd).wait()

# http://stackoverflow.com/questions/33188413/python-code-to-convert-from-objectsid-to-sid-representation
def convert_objsid_to_sidstr(binary):
    version = struct.unpack('B', binary[0])[0]
    # I do not know how to treat version != 1 (it does not exist yet)
    assert version == 1, version
    length = struct.unpack('B', binary[1])[0]
    authority = struct.unpack('>Q', '\x00\x00' + binary[2:8])[0]
    string = 'S-%d-%d' % (version, authority)
    binary = binary[8:]
    assert len(binary) == 4 * length
    for i in xrange(length):
        value = struct.unpack('<L', binary[4*i:4*(i+1)])[0]
        string += '-%d' % (value)
    return string

def realm_to_dn(realm):
    return ','.join(['dc=%s' % part for part in realm.split('.')])

def attrs(args):
    global admin, password, debug_level
    if args.object:
        admin, password = get_creds(admin, password)
        cmd = ['ldapsearch', '-d', debug_level, '-LLL', '-x', '-h', default_realm, '-D', '%s@%s' % (admin, default_realm), '-w', password]
        container = args.c
        if not container and args.g:
            container = 'cn=groups,%s' % realm_to_dn(default_realm)
        elif not container:
            container = 'cn=users,%s' % realm_to_dn(default_realm)
        cmd.extend(['-b', container])
        cmd.extend(['(cn=%s)' % args.object])
        if args.attributes:
            cmd.extend(args.attributes)
        if debug_level != '0':
            print ' '.join(cmd)
        p = Popen(cmd, stdout=PIPE)
        results = p.communicate()[0].strip().split('\n')[1:]
        if args.b:
            for i in range(0, len(results)):
                if results[i].split('::')[0] == 'objectSid':
                    objsid = results[i].split('::')[-1].strip()
                    results[i] = results[i].replace(objsid, convert_objsid_to_sidstr(b64decode(objsid)))
        print '\n'.join(results)
        return p.returncode
    else:
        print_help()

def timesync(args):
    if args.s:
        Popen(['service', 'ntpd', 'stop']).wait()
        Popen(['/usr/sbin/ntpdate', args.s]).wait()
        Popen(['service', 'ntpd', 'start']).wait()
    else:
        print_help()

def config_ntp(servers):
    # stop the ntp service
    Popen(['service', 'ntpd', 'stop']).wait()

    ntp_conf = '/etc/ntp.conf'
    config = ''
    for line in open(ntp_conf):
        if line.strip() and line.strip().split()[0] != 'server': # throw out old server list
            config += line
    for server in servers:
        config += '\nserver %s\n' % server
    of = open(ntp_conf, 'w')
    of.write(config)

    # tell ntp to update the time
    Popen(['/usr/sbin/ntpdate', server]).wait()

    # restart ntp
    Popen(['service', 'ntpd', 'start']).wait()

def config_smb_conf(domain, server):
    smb_conf = get_smb_conf()
    of = open(smb_conf, 'w')
    of.write('[global]\n')
    of.write('\tworkgroup = %s\n' % domain.split('.')[0].upper())
    of.write('\trealm = %s\n' % domain.upper())
    of.write('\tlog file = /var/log/samba/%%m.log\n')
    of.write('\tlog level = 1\n')
    of.write('\twinbind nss info = rfc2307\n')
    of.write('\tidmap config *:backend = tdb\n')
    of.write('\tidmap config *:range = 2000-9999\n')
    of.write('\tidmap config SAMDOM:backend = ad\n')
    of.write('\tidmap config SAMDOM:schema_mode = rfc2307\n')
    of.write('\tidmap config SAMDOM:range = 10000-99999\n')
    of.write('\twinbind offline logon = yes\n')

def get_winbind_conf():
    return '/etc/security/pam_winbind.conf'

def config_winbind_conf():
    winbind_conf = get_winbind_conf()
    of = open(winbind_conf, 'w')
    of.write('[global]\n')
    of.write('\tcached_login = yes\n')
    of.write('\tkrb5_auth = yes\n')
    of.write('\tkrb5_ccache_type = FILE\n')
    of.write('\twarn_pwd_expire = 14\n')
    of.write('\tmkhomedir = yes\n')

def configure_nss():
    nsswitch = '/etc/nsswitch.conf'
    conf = ''
    for line in open(nsswitch):
        fore = line.strip().split(':')[0]
        if (fore == 'passwd' or fore == 'group') and 'winbind' not in line:
            conf += '%s winbind\n' % line.rstrip()
        else:
            conf += line
    of = open(nsswitch, 'w')
    of.write(conf)

def configure_pam():
    pam_conf = '/etc/pam.d/common-auth'
    conf = ''
    for line in open(pam_conf):
        if 'pam_unix.so' in line:
            conf += 'auth\tsufficient\tpam_unix.so try_first_pass\n'
            conf += 'auth\trequired\tpam_winbind.so use_first_pass\n'
        else:
            conf += line
    of = open(pam_conf, 'w')
    of.write(conf)

def join(args):
    global admin, password, debug_level
    if getuser() != 'root':
        sys.stderr.write('adtool join must be run as root\n')
        exit(1)
    admin, password = get_creds(admin, password)

    server = None
    if not args.servers:
        server = args.domain
    else:
        server = args.servers[-1]

    # Configure ntp
    print 'Adding ntp servers and time syncing with AD...'
    config_ntp(args.servers)

    # configure smb.conf
    print 'Configuring smb.conf...'
    config_smb_conf(args.domain, server)

    # configure pam_winbind.conf
    print 'Configuring pam_winbind.conf...'
    config_winbind_conf()

    # net ads join the domain
    print 'Joining the domain...'
    cmd = ['net', 'ads', 'join', '-U%s%%%s' % (admin, password), '-d', debug_level, '-S', server]
    if debug_level != '0':
        print ' '.join(cmd)
    ret = Popen(cmd).wait()
    if ret != 0:
        return ret

    # configure nss
    print 'Configuring nsswitch.conf...'
    configure_nss()

    # configure pam
    print 'Configuring pam...'
    configure_pam()

    # start winbindd
    print 'Starting winbindd...'
    Popen(['/usr/sbin/winbindd', '-D']) # intentionally not waiting

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="AD tool: for simplifying access to AD on unix systems", formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-u', help='Authenticating user')
    parser.add_argument('-w', help='Authenticating password')
    parser.add_argument('-d', help='debug level')
    subparsers = parser.add_subparsers()

    nss_parser = subparsers.add_parser('nss')
    nss_parser.add_argument('s2', choices=['getpwnam', 'getpwuid', 'getgrnam', 'getgrid', 'getpwent', 'getgrent'])
    nss_parser.add_argument('object', nargs='?')
    nss_parser.set_defaults(func=nss)

    user_parser = subparsers.add_parser('user')
    user_parser.add_argument('s2', choices=['checklogin', 'checkaccess'])
    user_parser.add_argument('user', nargs='?')
    user_parser.set_defaults(func=user)

    create_parser = subparsers.add_parser('create')
    create_parser.add_argument('s2', choices=['user', 'group'])
    create_parser.add_argument('object', nargs='?')
    create_parser.set_defaults(func=create)

    delete_parser = subparsers.add_parser('delete')
    delete_parser.add_argument('s2', choices=['user', 'group'])
    delete_parser.add_argument('object', nargs='?')
    delete_parser.set_defaults(func=delete)

    list_parser = subparsers.add_parser('list')
    list_parser.add_argument('s2', choices=['users', 'groups'])
    list_parser.set_defaults(func=nss)

    passwd_parser = subparsers.add_parser('passwd')
    passwd_parser.add_argument('object', nargs='?')
    passwd_parser.set_defaults(func=passwd)

    attrs_parser = subparsers.add_parser('attrs')
    attrs_parser.add_argument('-b', action='store_true', help='Convert sid to human readable form')
    attrs_parser.add_argument('-c', help='Container to search in')
    attrs_parser.add_argument('-g', help='Treat the object as a group name', action='store_true')
    attrs_parser.add_argument('object')
    attrs_parser.add_argument('attributes', nargs='*')
    attrs_parser.set_defaults(func=attrs)

    join_parser = subparsers.add_parser('join')
    join_parser.add_argument('domain')
    join_parser.add_argument('servers', nargs='*')
    join_parser.set_defaults(func=join)

    timesync_parser = subparsers.add_parser('timesync')
    timesync_parser.add_argument('-s', help='Server to sync with')
    timesync_parser.set_defaults(func=timesync)

    args = parser.parse_args()

    if args.u:
        admin = args.u
    if args.w:
        password = args.w
    if args.d:
        debug_level = args.d

    exit(args.func(args))

