#!@PYTHON@
import sys, argparse, PAM, struct, netifaces, os.path, ldap
from getpass import getpass, getuser
from subprocess import Popen, PIPE
from base64 import b64decode, b64encode

krb5_conf = '@KRB5CONF@'
winbindd = '@WINBINDD@'
smbd = '@SMBD@'
pam_account_conf = '@PAM_D@/common-account'
pam_auth_conf = '@PAM_D@/common-auth'
pam_password_conf = '@PAM_D@/common-password'
pam_session_conf = '@PAM_D@/common-session'
winbind_conf = '@WINBINDCONF@'
admin = None
password = None
debug_level = '0'

# this is clunky, but works for now (ConfigParser can't parse a krb5.conf)
def get_default_realm_int():
    global krb5_conf
    ans = ''
    for line in open(krb5_conf):
        line = line.split('#')[0]
        if 'default_realm' in line:
            ans = line.split()[-1]
    # the last defined default_realm is the one we choose
    if not ans:
        ans = raw_input('Default realm not found, specify a server: ')
    return ans

default_realm = None
def get_default_realm():
    global default_realm
    if not default_realm:
        default_realm = get_default_realm_int()
    return default_realm

smb_conf = None
def get_smb_conf():
    global smb_conf
    if not smb_conf:
        smb_conf = Popen(['grep', 'CONFIGFILE'], stdin=Popen([smbd, '-b'], stdout=PIPE).stdout, stdout=PIPE).communicate()[0].strip().split(':')[-1].strip()
    return smb_conf
    
def print_help():
    print 'invalid syntax or option not implemented'

def user_list(admin, password, debug_level):
    cmd = ['net', '--configfile=%s' % get_smb_conf(), 'rpc', 'user', '-U%s%%%s' % (admin, password), '-S', get_default_realm()]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd, stdout=PIPE).communicate()[0].strip().split('\n')

def group_list(admin, password, debug_level):
    cmd = ['net', '--configfile=%s' % get_smb_conf(), 'rpc', 'group', '-U%s%%%s' % (admin, password), '-S', get_default_realm()]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd, stdout=PIPE).communicate()[0].strip().split('\n')

def getpwnam(user, debug_level):
    cmd = ['getent', 'passwd', user]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd, stdout=PIPE).communicate()[0].strip()

def getgrnam(group, debug_level):
    cmd = ['getent', 'group', group]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd, stdout=PIPE).communicate()[0].strip()

def getpwent(admin, password, debug_level):
    cmd = ['getent', 'passwd']
    if debug_level != '0':
        print ' '.join(cmd)
    ulist = Popen(cmd, stdout=PIPE).communicate()[0].strip().split('\n')
    ulist.extend([getpwnam('%s@%s' % (user, get_default_realm()), debug_level) for user in user_list(admin, password, debug_level)])
    return ulist

def getgrent(admin, password, debug_level):
    cmd = ['getent', 'group']
    if debug_level != '0':
        print ' '.join(cmd)
    glist = Popen(cmd, stdout=PIPE).communicate()[0].strip().split('\n')
    glist.extend([getgrnam('%s@%s' % (group, get_default_realm()), debug_level) for group in group_list(admin, password, debug_level)])
    return glist

def get_creds(admin, password):
    if not admin:
        admin = raw_input("Username: ")
    if not password:
        password = getpass("Password: ")
    return (admin, password)

def pam_conv(auth, query_list):
    resp = []
    for (query, type) in query_list:
        # Never echo
        if type == PAM.PAM_PROMPT_ECHO_ON or PAM.PAM_PROMPT_ECHO_OFF:
            resp.append((getpass(query), 0))
        else:
            print query
            resp.append(('', 0))
    return resp

def nss(args):
    global admin, password, debug_level
    if args.s2 == 'getpwnam' or args.s2 == 'getpwuid':
        pw = getpwnam(args.object, debug_level)
        if not pw:
            pw = getpwnam('%s@%s' % (args.object, get_default_realm()), debug_level)
        if pw:
            print pw
    elif args.s2 == 'getgrnam' or args.s2 == 'getgrid':
        gr = getgrnam(args.object, debug_level)
        if not gr:
            gr = getgrnam('%s@%s' % (args.object, get_default_realm()), debug_level)
        if gr:
            print gr
    elif args.s2 == 'getpwent' or args.s2 == 'users':
        admin, password = get_creds(admin, password)
        ulist = getpwent(admin, password, debug_level)
        for pw in ulist:
            if pw.strip():
                print pw
    elif args.s2 == 'getgrent' or args.s2 == 'groups':
        admin, password = get_creds(admin, password)
        glist = getgrent(admin, password, debug_level)
        for gr in glist:
            if gr.strip():
                print gr
    else:
        print_help()

def unix_enable_user(name, passwd, container=None):
    global admin, password, debug_level
    admin, password = get_creds(admin, password)
    if not container:
        container = 'cn=users,%s' % realm_to_dn(get_default_realm())

    data = passwd.split(':')
    attrs = {'uidNumber': data[2], 'gidNumber': data[3], 'gecos': data[4], 'homeDirectory': data[5], 'loginShell': data[6]}
    ldif = 'dn: cn=%s,%s\n' % (name, container)
    ldif += 'changetype: modify\n'
    for key in attrs.keys():
        if attrs[key]:
            ldif += 'replace: %s\n' % key
            ldif += '%s: %s\n' % (key, attrs[key])

    cmd = ['ldapmodify', '-d', debug_level, '-x', '-h', get_default_realm(), '-D', '%s@%s' % (admin, get_default_realm()), '-w', password]
    if debug_level != '0':
        print ' '.join(cmd)
        print ldif
    p = Popen(cmd, stdin=PIPE)
    p.communicate(input=ldif)
    return p.returncode

def create(args):
    global admin, password, debug_level
    admin, password = get_creds(admin, password)
    if args.s2 == 'user':
        if not args.e:
            new_user_pass = getpass("New password: ")
            cmd = ['net', '--configfile=%s' % get_smb_conf(), 'rpc', 'user', 'add', args.object, new_user_pass, '-U%s%%%s' % (admin, password), '-S', get_default_realm(), '-d', debug_level]
            if debug_level != '0':
                print ' '.join(cmd)
            ret = Popen(cmd).wait()
            if ret:
                return ret
        if args.i:
            return unix_enable_user(args.object, args.i, args.c)
    elif args.s2 == 'group':
        cmd = ['net', '--configfile=%s' % get_smb_conf(), 'rpc', 'group', 'add', args.object, '-U%s%%%s' % (admin, password), '-S', get_default_realm(), '-d', debug_level]
        if debug_level != '0':
            print ' '.join(cmd)
        return Popen(cmd).wait()
    else:
        print_help()

def delete(args):
    global admin, password, debug_level
    admin, password = get_creds(admin, password)
    if args.s2 == 'user':
        cmd = ['net', '--configfile=%s' % get_smb_conf(), 'rpc', 'user', 'delete', args.object, '-U%s%%%s' % (admin, password), '-S', get_default_realm(), '-d', debug_level]
        if debug_level != '0':
            print ' '.join(cmd)
        return Popen(cmd).wait()
    elif args.s2 == 'group':
        cmd = ['net', '--configfile=%s' % get_smb_conf(), 'rpc', 'group', 'delete', args.object, '-U%s%%%s' % (admin, password), '-S', get_default_realm(), '-d', debug_level]
        if debug_level != '0':
            print ' '.join(cmd)
        return Popen(cmd).wait()
    else:
        print_help()

def user(args):
    global admin, password, debug_level
    if args.s2 == 'checklogin' and args.user:
        p = PAM.pam()
        p.start('passwd')
        p.set_item(PAM.PAM_USER, args.user)
        p.set_item(PAM.PAM_CONV, pam_conv)
        try:
            p.authenticate()
        except:
            print 'Authentication failed'
        else:
            print 'Authentication succeeded'
        try:
            p.acct_mgmt()
        except:
            print 'User is not allowed'
        else:
            print 'User is allowed'
    elif args.s2 == 'checkaccess' and args.user:
        p = PAM.pam()
        p.start('passwd')
        p.set_item(PAM.PAM_USER, args.user)
        try:
            p.acct_mgmt()
        except:
            print 'User is not allowed'
        else:
            print 'User is allowed'

def passwd(args):
    global admin, password, debug_level
    admin, password = get_creds(admin, password)
    if args.object:
        user = args.object
    else:
        user = getuser()
    cmd = ['net', '--configfile=%s' % get_smb_conf(), 'rpc', 'password', user, '-U%s%%%s' % (admin, password), '-S', get_default_realm(), '-d', debug_level]
    if debug_level != '0':
        print ' '.join(cmd)
    return Popen(cmd).wait()

# http://stackoverflow.com/questions/33188413/python-code-to-convert-from-objectsid-to-sid-representation
def convert_objsid_to_sidstr(binary):
    version = struct.unpack('B', binary[0])[0]
    # I do not know how to treat version != 1 (it does not exist yet)
    assert version == 1, version
    length = struct.unpack('B', binary[1])[0]
    authority = struct.unpack('>Q', '\x00\x00' + binary[2:8])[0]
    string = 'S-%d-%d' % (version, authority)
    binary = binary[8:]
    assert len(binary) == 4 * length
    for i in xrange(length):
        value = struct.unpack('<L', binary[4*i:4*(i+1)])[0]
        string += '-%d' % (value)
    return string

def realm_to_dn(realm):
    return ','.join(['dc=%s' % part for part in realm.split('.')])

def print_ldap_object(obj, sidstr):
    for key in obj.keys():
        if key in ['logonHours', 'objectGUID', 'objectSid']:
            if key == 'objectSid' and sidstr:
                obj[key] = [convert_objsid_to_sidstr(o) for o in obj[key]]
            else:
                obj[key] = [b64encode(o) for o in obj[key]]
            for ob in obj[key]:
                print '%s:: %s' % (key, ob)
        else:
            for ob in obj[key]:
                print '%s: %s' % (key, ob)

def attrs(args):
    global admin, password, debug_level
    if args.object:
        admin, password = get_creds(admin, password)
        l = ldap.open(get_default_realm())
        l.bind_s('%s@%s' % (admin, get_default_realm()), password)
        container = args.c
        if not container and args.g:
            container = 'cn=groups,%s' % realm_to_dn(get_default_realm())
        elif not container:
            container = 'cn=users,%s' % realm_to_dn(get_default_realm())
        results = l.search_s(container, ldap.SCOPE_SUBTREE, '(cn=%s)' % args.object, args.attributes)
        for result in results:
            print_ldap_object(result[1], args.b)
            print
    else:
        print_help()

def setattrs(args):
    global admin, password, debug_level

    ldif = 'dn: %s\n' % args.object
    ldif += 'changetype: modify\n'
    ldif += 'replace: %s\n' % args.attribute
    ldif += '%s: %s\n' % (args.attribute, args.value)

    if ldif:
        admin, password = get_creds(admin, password)
        cmd = ['ldapmodify', '-d', debug_level, '-x', '-h', get_default_realm(), '-D', '%s@%s' % (admin, get_default_realm()), '-w', password]
        if debug_level != '0':
            print ' '.join(cmd)
        Popen(cmd, stdin=PIPE).communicate(input=ldif)
    else:
        print_help()

def timesync(args):
    if args.s:
        Popen(['service', 'ntpd', 'stop']).wait()
        Popen(['/usr/sbin/ntpdate', args.s]).wait()
        Popen(['service', 'ntpd', 'start']).wait()
    else:
        print_help()

def config_ntp(servers):
    # stop the ntp service
    Popen(['service', 'ntpd', 'stop']).wait()

    ntp_conf = '/etc/ntp.conf'
    config = ''
    for line in open(ntp_conf):
        if line.strip() and line.strip().split()[0] != 'server': # throw out old server list
            config += line
    for server in servers:
        config += '\nserver %s\n' % server
    of = open(ntp_conf, 'w')
    of.write(config)

    # tell ntp to update the time
    Popen(['/usr/sbin/ntpdate', servers[0]]).wait()

    # restart ntp
    Popen(['service', 'ntpd', 'start']).wait()

def config_smb_conf(domain, server, autogen=False):
    smb_conf = get_smb_conf()
    of = open(smb_conf, 'w')
    of.write('[global]\n')
    of.write('\tsecurity = ads\n')
    of.write('\tworkgroup = %s\n' % domain.split('.')[0].upper())
    of.write('\trealm = %s\n' % domain.upper())
    of.write('\tlog file = /var/log/samba/%m.log\n')
    of.write('\tlog level = 1\n')
    of.write('\tpassdb backend = tdbsam\n')
    of.write('\tmap to guest = Bad User\n')
    of.write('\tlogon path = \\\\%L\\profiles\\.msprofile\n')
    of.write('\tlogon home = \\\\%L\\%U\\.9xprofile\n')
    of.write('\tlogon drive = P:\n')
    of.write('\tusershare allow guests = Yes\n')
    of.write('\twinbind offline logon = yes\n')
    if autogen:
        of.write('\twinbind nss info = template\n')
        of.write('\ttemplate shell = /bin/bash\n')
        of.write('\ttemplate homedir = /home/%D/%U\n')
        of.write('\tidmap config *:backend = autorid\n')
        of.write('\tidmap config *:range = 2000-99999\n')
    else:
        of.write('\tidmap config *:backend = ad\n')
        of.write('\tidmap config *:schema_mode = rfc2307\n')
        of.write('\tidmap config *:range = 2000-99999\n')
        of.write('\twinbind nss info = rfc2307\n')

def config_winbind_conf():
    global winbind_conf
    of = open(winbind_conf, 'w')
    of.write('[global]\n')
    of.write('\tcached_login = yes\n')
    of.write('\tkrb5_auth = yes\n')
    of.write('\tkrb5_ccache_type = FILE\n')
    of.write('\twarn_pwd_expire = 14\n')
    of.write('\tmkhomedir = yes\n')

def follow_symlinks(files):
    for name in files:
        if os.path.exists(name) and os.path.islink(name):
            print '%s links to %s' % (name, os.path.realpath(name))

def configure_nss():
    nsswitch = '/etc/nsswitch.conf'
    conf = ''
    for line in open(nsswitch):
        fore = line.strip().split(':')[0]
        if (fore == 'passwd' or fore == 'group') and 'winbind' not in line:
            conf += '%s winbind\n' % line.rstrip()
        else:
            conf += line
    of = open(nsswitch, 'w')
    of.write(conf)
    if not os.path.exists('@LIBDIR@/libnss_winbind.so'):
        if os.path.exists('@LIBDIR@/libnss_winbind.so.2'):
            os.symlink('@LIBDIR@/libnss_winbind.so.2', '@LIBDIR@/libnss_winbind.so')
            follow_symlinks(['@LIBDIR@/libnss_winbind.so'])
        else:
            sys.stderr.write('Cannot find @LIBDIR@/libnss_winbind.so, check that you\'ve installed the library')
    else:
        follow_symlinks(['@LIBDIR@/libnss_winbind.so'])

def configure_pam_auth(pam_conf):
    conf = ''
    for line in open(pam_conf):
        if 'pam_unix.so' in line and line.split()[0] == 'auth':
            conf += 'auth\tsufficient\tpam_unix.so try_first_pass\n'
            conf += 'auth\trequired\tpam_winbind.so use_first_pass\n'
        elif not 'pam_winbind.so' in line:
            conf += line
    of = open(pam_conf, 'w')
    of.write(conf)

def configure_pam_account(pam_conf):
    conf = ''
    for line in open(pam_conf):
        if 'pam_unix.so' in line and line.split()[0] == 'account':
            conf += 'account\trequisite\tpam_unix.so\ttry_first_pass\n'
            conf += 'account\tsufficient\tpam_localuser.so\n'
            conf += 'account\trequired\tpam_winbind.so\tuse_first_pass\n'
        elif not 'pam_winbind.so' in line and not 'pam_localuser.so' in line:
            conf += line
    of = open(pam_conf, 'w')
    of.write(conf)

def configure_pam_password(pam_conf):
    conf = ''
    first_line = True
    for line in open(pam_conf):
        if line.strip()[0] != '#' and first_line:
            conf += 'password\tsufficient\tpam_winbind.so\n'
            conf += 'password\trequisite\tpam_cracklib.so\n'
            first_line = False
        elif not 'pam_winbind.so' in line and not 'pam_cracklib.so' in line:
            conf += line
    of = open(pam_conf, 'w')
    of.write(conf)

def configure_pam_session(pam_conf):
    conf = ''
    for line in open(pam_conf):
        if 'pam_unix.so' in line and line.split()[0] == 'session':
            conf += 'session\trequired\tpam_unix.so\ttry_first_pass\n'
            conf += 'session\trequired\tpam_winbind.so\n'
        elif not 'pam_winbind.so' in line:
            conf += line
    of = open(pam_conf, 'w')
    of.write(conf)

def configure_pam():
    global pam_account_conf, pam_auth_conf, pam_password_conf, pam_session_conf

    configure_pam_auth(pam_auth_conf)
    configure_pam_account(pam_account_conf)
    configure_pam_password(pam_password_conf)
    configure_pam_session(pam_session_conf)

    if not os.path.exists('@LIBDIR@/security/pam_winbind.so'):
        sys.stderr.write('Cannot find @LIBDIR@/security/pam_winbind.so, check that you\'ve installed the library')
    else:
        follow_symlinks(['@LIBDIR@/security/pam_winbind.so'])

def configure(args):
    if args.s2 == 'pam':
        configure_pam()
    elif args.s2 == 'nss':
        configure_nss()
    else:
        print_help()

def update_hostname(hostname, domain):
    # Retrieve the current hostname if one was specified
    shortname = None
    if not hostname:
        hostname = Popen(['hostname'], stdout=PIPE).communicate()[0].strip()
    if not domain.lower() in hostname:
        shortname = hostname
        hostname = '%s.%s\n' % (hostname, domain)
    else:
        shortname = hostname.split('.')[0]

    # Update the /etc/hostname file
    hf = open('/etc/hostname', 'w')
    hf.write('%s\n' % hostname)

    # Update the in-memory hostname
    Popen(['hostname', hostname]).wait()

    # Add an entry to /etc/hosts so we can resolve our own name
    hosts = '/etc/hosts'
    ip_addrs = [netifaces.ifaddresses(interface)[2][0]['addr'] for interface in netifaces.interfaces() if netifaces.ifaddresses(interface)[2][0]['addr'] != '127.0.0.1']
    conf = ''
    for line in open(hosts):
        if hostname not in line:
            conf += line
    conf = conf.strip()
    conf += '\n'
    # Only the last one is used, may need to be manually configured
    for ip in ip_addrs:
        conf += '%s\t%s %s\n' % (ip, hostname, shortname)
    of = open(hosts, 'w')
    of.write(conf)

def config_krb5_conf(domain, server):
    global krb5_conf
    kof = open(krb5_conf, 'w')
    kof.write('[libdefaults]\n')
    kof.write('\tdefault_realm = %s\n' % domain)
    kof.write('\tclockskew = 300\n')
    kof.write('\tticket_lifetime = 1d\n')
    kof.write('\tforwardable = true\n')
    kof.write('\tproxiable = true\n')
    kof.write('\tdns_lookup_realm = true\n')
    kof.write('\tdns_lookup_kdc = true\n')
    kof.write('\tudp_preference_limit = 1\n') # disable UDP packets
    kof.write('\n\n[realms]\n')
    kof.write('\t%s = {\n\t\tkdc = %s\n\t\tadmin_server = %s\n\t\tdefault_domain = %s\n\t}\n' % (domain, server, server, domain))

def join(args):
    global admin, password, debug_level, winbindd, smb_conf
    if getuser() != 'root':
        sys.stderr.write('adtool join must be run as root\n')
        exit(1)
    admin, password = get_creds(admin, password)

    server = None
    if not args.servers:
        server = args.domain
    else:
        server = args.servers[-1]

    # Configure ntp
    print 'Adding ntp servers and time syncing with AD...'
    if args.servers:
        config_ntp(args.servers)
    else:
        config_ntp([server])

    # Update hostname
    print 'Updating hostname...'
    update_hostname(args.n, args.domain)

    # configure smb.conf
    print 'Configuring smb.conf...'
    config_smb_conf(args.domain, server, autogen=args.autogen_posix_attrs)

    # configure pam_winbind.conf
    print 'Configuring pam_winbind.conf...'
    config_winbind_conf()

    # configure kerberos
    print 'Configuring kerberos...'
    config_krb5_conf(args.domain, server)

    # net ads join the domain
    print 'Joining the domain...'
    cmd = ['net', '--configfile=%s' % get_smb_conf(), 'ads', 'join', '-U%s%%%s' % (admin, password), '-d', debug_level, '-S', server]
    if debug_level != '0':
        print ' '.join(cmd)
    ret = Popen(cmd).wait()
    if ret != 0:
        return ret

    # configure nss
    print 'Configuring nsswitch.conf...'
    configure_nss()

    # configure pam
    print 'Configuring pam...'
    configure_pam()

    # start winbindd
    print 'Starting winbindd...'
    cmd = [winbindd, '-d', debug_level, '--configfile=%s' % smb_conf, '-D']
    if debug_level != '0':
        print ' '.join(cmd)
    ret = Popen(cmd).wait()
    if ret != 0:
        return ret

def info(args):
    pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="AD tool: for simplifying access to AD on unix systems", formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--krb5_conf', help='Specify the location of the krb5.conf file')
    parser.add_argument('--pam_account_conf', help='Specify the location of the pam account conf file')
    parser.add_argument('--pam_auth_conf', help='Specify the location of the pam auth conf file')
    parser.add_argument('--pam_password_conf', help='Specify the location of the pam password file')
    parser.add_argument('--pam_session_conf', help='Specify the location of the pam session file')
    parser.add_argument('--pam_winbind_conf', help='Specify the location of the pam_winbind.conf file')
    parser.add_argument('--winbindd', help='Specify the location of the winbind daemon')
    parser.add_argument('--smbd', help='Specify the location of the smb daemon')
    parser.add_argument('-u', help='Authenticating user')
    parser.add_argument('-w', help='Authenticating password')
    parser.add_argument('-d', help='debug level')
    subparsers = parser.add_subparsers()

    nss_parser = subparsers.add_parser('nss')
    nss_parser.add_argument('s2', choices=['getpwnam', 'getpwuid', 'getgrnam', 'getgrid', 'getpwent', 'getgrent'])
    nss_parser.add_argument('object', nargs='?')
    nss_parser.set_defaults(func=nss)

    user_parser = subparsers.add_parser('user')
    user_parser.add_argument('s2', choices=['checklogin', 'checkaccess'])
    user_parser.add_argument('user', nargs='?')
    user_parser.set_defaults(func=user)

    create_parser = subparsers.add_parser('create')
    create_parser.add_argument('-e', help='Operate on an existing object', action='store_true')
    create_parser.add_argument('-i', help='Passwd line for unix enable')
    create_parser.add_argument('-c', help='Container to search in')
    create_parser.add_argument('s2', choices=['user', 'group'])
    create_parser.add_argument('object', nargs='?')
    create_parser.set_defaults(func=create)

    delete_parser = subparsers.add_parser('delete')
    delete_parser.add_argument('s2', choices=['user', 'group'])
    delete_parser.add_argument('object', nargs='?')
    delete_parser.set_defaults(func=delete)

    list_parser = subparsers.add_parser('list')
    list_parser.add_argument('s2', choices=['users', 'groups'])
    list_parser.set_defaults(func=nss)

    passwd_parser = subparsers.add_parser('passwd')
    passwd_parser.add_argument('object', nargs='?')
    passwd_parser.set_defaults(func=passwd)

    attrs_parser = subparsers.add_parser('attrs')
    attrs_parser.add_argument('-b', action='store_true', help='Convert sid to human readable form')
    attrs_parser.add_argument('-c', help='Container to search in')
    attrs_parser.add_argument('-g', help='Treat the object as a group name', action='store_true')
    attrs_parser.add_argument('object')
    attrs_parser.add_argument('attributes', nargs='*')
    attrs_parser.set_defaults(func=attrs)

    setattrs_parser = subparsers.add_parser('setattrs')
    setattrs_parser.add_argument('object', help='distinguishedName')
    setattrs_parser.add_argument('attribute')
    setattrs_parser.add_argument('value')
    setattrs_parser.set_defaults(func=setattrs)

    join_parser = subparsers.add_parser('join')
    join_parser.add_argument('--autogen-posix-attrs', action='store_true')
    join_parser.add_argument('domain')
    join_parser.add_argument('-n', help='Join as hostname')
    join_parser.add_argument('servers', nargs='*')
    join_parser.set_defaults(func=join)

    timesync_parser = subparsers.add_parser('timesync')
    timesync_parser.add_argument('-s', help='Server to sync with')
    timesync_parser.set_defaults(func=timesync)

    configure_parser = subparsers.add_parser('configure')
    configure_parser.add_argument('s2', choices=['pam', 'nss'])
    configure_parser.set_defaults(func=configure)

    info_parser = subparsers.add_parser('info')
    info_parser.add_argument('s2', choices=['domain'])
    info_parser.set_defaults(func=info)

    args = parser.parse_args()

    if args.krb5_conf:
        krb5_conf = args.krb5_conf
    if args.pam_account_conf:
        pam_account_conf = args.pam_account_conf
    if args.pam_auth_conf:
        pam_auth_conf = args.pam_auth_conf
    if args.pam_password_conf:
        pam_password_conf = args.pam_password_conf
    if args.pam_session_conf:
        pam_session_conf = args.pam_session_conf
    if args.pam_winbind_conf:
        winbind_conf = args.pam_winbind_conf
    if args.winbindd:
        winbindd = args.winbindd
    if args.smbd:
        smbd = args.smbd

    if args.u:
        admin = args.u
    if args.w:
        password = args.w
    if args.d:
        debug_level = args.d

    exit(args.func(args))

